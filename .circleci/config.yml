version: 2
jobs:

######################## PR TO STAGING ########################
  test_discardable:
    machine:
      enabled: true
      docker_layer_caching: true
    working_directory: ~/kubernetes-monitor
    steps:
      - checkout
      - run:
          name: TEST DISCARDABLE
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            npm test

######################## MERGE TO STAGING ########################
  test_and_build:
    machine:
      enabled: true
      docker_layer_caching: true
    working_directory: ~/kubernetes-monitor
    steps:
      - checkout
      - run:
          name: TEST AND BUILD
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            npm run lint &&
            npm run build &&
            npm run test:unit &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            IMAGE_NAME_CANDIDATE=snyk/kubernetes-monitor:staging-candidate-${CIRCLE_SHA1} &&
            ./scripts/build-image.sh ${IMAGE_NAME_CANDIDATE} &&
            docker push ${IMAGE_NAME_CANDIDATE} &&
            ./scripts/slack-notify-push.sh ${IMAGE_NAME_CANDIDATE} &&
            KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=${IMAGE_NAME_CANDIDATE} npm run test:integration ||
            ( ./scripts/slack-notify-failure.sh "staging-test" && false )
  tag_and_push:
    working_directory: ~/kubernetes-monitor
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: TAG AND PUSH
          command: |
            npm install &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            unset CIRCLE_PULL_REQUEST &&
            unset CI_PULL_REQUEST &&
            unset CI_PULL_REQUESTS &&
            unset CIRCLE_PULL_REQUESTS &&
            npx semantic-release &&
            NEW_VERSION=`cat ./package.json | jq -r '.version'` &&
            ./scripts/approve-image.sh $NEW_VERSION ||
            ( ./scripts/slack-notify-failure.sh "staging-release" && false )
  deploy_dev:
    working_directory: ~/kubernetes-monitor
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run:
          name: DEPLOY DEV
          command: |
            LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
            LATEST_TAG=${LATEST_TAG_WITH_V:1} &&
            ./scripts/slack-notify-deploy.sh $LATEST_TAG-approved dev &&
            curl -i -H "Accept: application/json" -H "Content-Type: application/json" \
                -X POST -d "{\"docker_sha\":\"${LATEST_TAG}\", \
                              \"commit_hash\":\"${CIRCLE_SHA1}\"}" \
                https://my.dev.snyk.io/${DEV_DEPLOY_TOKEN}

######################## PR TO MASTER ########################
  prepublish:
    working_directory: ~/kubernetes-monitor
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run:
          name: PREPUBLISH
          command: |
            ./scripts/slack-notify-pr.sh

######################## MERGE TO MASTER ########################
  publish:
    working_directory: ~/kubernetes-monitor
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: PUBLISH
          command: |
            LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
            LATEST_TAG=${LATEST_TAG_WITH_V:1} &&
            IMAGE_NAME_APPROVED=snyk/kubernetes-monitor:${LATEST_TAG}-approved &&
            IMAGE_NAME_PUBLISHED=snyk/kubernetes-monitor:${LATEST_TAG} &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            docker pull ${IMAGE_NAME_APPROVED} &&
            docker tag ${IMAGE_NAME_APPROVED} ${IMAGE_NAME_PUBLISHED} &&
            docker push ${IMAGE_NAME_PUBLISHED} &&
            ./scripts/slack-notify-push.sh ${IMAGE_NAME_PUBLISHED} &&
            docker tag ${IMAGE_NAME_APPROVED} snyk/kubernetes-monitor:latest &&
            docker push snyk/kubernetes-monitor:latest &&
            ./scripts/slack-notify-push.sh snyk/kubernetes-monitor:latest &&
            ./scripts/publish-gh-pages.sh ${LATEST_TAG} ||
            ( ./scripts/slack-notify-failure.sh master && false )

#######################################################################

workflows:
  version: 2
  PR_TO_STAGING:
    jobs:
      - test_discardable:
          filters:
            branches:
              ignore:
                - staging
                - master
  MERGE_TO_STAGING:
    jobs:
      - test_and_build:
          filters:
            branches:
              only:
                - staging
      - tag_and_push:
          requires:
            - test_and_build
          filters:
            branches:
              only:
                - staging
      - deploy_dev:
          requires:
            - tag_and_push
          filters:
            branches:
              only:
                - staging

# reserved for the "pre publish "
  # PR_TO_MASTER:
  #   jobs:
  #     - prepublish:
  #         filters:
  #           branches:
  #             only:
  #               - master

  MERGE_TO_MASTER:
    jobs:
      - publish:
          filters:
            branches:
              only:
                - master

general:
  branches:
    ignore:
      - gh-pages
